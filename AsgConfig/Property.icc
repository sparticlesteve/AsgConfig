#include "CxxUtils/make_unique.h"

namespace ana
{

  //---------------------------------------------------------------------------
  // Default constructor
  //---------------------------------------------------------------------------
  template<class T>
  PropertyTVal<T>::PropertyTVal()
  {}

  //---------------------------------------------------------------------------
  // Polymorphically clone a property
  //---------------------------------------------------------------------------
  template<class T> std::unique_ptr<PropertyVal>
  PropertyTVal<T>::clone() const
  {
    auto p = CxxUtils::make_unique < PropertyTVal<T> > (*this);
    return std::move(p);
  }

  //---------------------------------------------------------------------------
  // Templated property constructor
  //---------------------------------------------------------------------------
  template<class T>
  PropertyTVal<T>::PropertyTVal(const std::string& name, const T& val)
    : PropertyVal(name), m_val(val)
  {}

  //---------------------------------------------------------------------------
  // Retrieve the property value
  //---------------------------------------------------------------------------
  template<class T> const T&
  PropertyTVal<T>::value() const
  { return m_val; }

  //---------------------------------------------------------------------------
  // Retrieve the property type
  //---------------------------------------------------------------------------
  template<class T> const std::type_info&
  PropertyTVal<T>::type() const
  { return typeid(T); }

} // namespace ana
